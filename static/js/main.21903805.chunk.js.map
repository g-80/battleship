{"version":3,"sources":["factories/Gameboard.js","factories/Player.js","factories/ComputerAI.js","reducer.js","GameContext.js","components/GameStart.js","factories/Ship.js","game_logic/shipsPlacement.js","components/Gameboard.js","components/ShipsPlacement.js","game_logic/battle.js","components/Battle.js","components/Gameover.js","components/ComponentsRenderer.js","App.js","index.js","components/styles/gameboard.module.css","components/styles/shipsPlacement.module.css","components/styles/gameStart.module.css"],"names":["Gameboard","boardCells","i","push","hasShip","isShot","board","createLocationArray","cell","shipLength","axis","locationArray","updateCellsHaveShip","forEach","checkCollisions","some","collisionCell","every","combination","includes","receiveAttack","this","isShipHit","areAllShipsSunk","filter","opponentBoard","map","Player","type","ships","gameboard","attack","location","ComputerAI","availableShots","shotsHit","sunkShipsCells","getRandomItemFromArray","array","Math","floor","random","length","updateAvailableShots","newAvailableShots","newShotsHit","loc","index","filterShotsHit","find","ship","position","isSunk","detectShips","detectedShip","thisArray","lastIndexOf","firstShipCell","possibleShots","furthestRight","furthestUp","followUpSingleHits","hitCell","getRandomLocation","getAttackLocation","Object","assign","reducer","state","action","payload","players","human","ai","stage","message","player","newState","turn","winner","initialState","GameContext","createContext","GameContextProvider","props","useReducer","dispatch","Provider","value","children","GameStart","useContext","className","styles","flexContainer","gameTitle","onClick","Ship","name","hits","hit","point","shipsTypes","createShips","shipsObjects","newShip","setPlayerShips","playerType","placeAIShips","aiGameboard","locationArrays","axes","randomAxis","availableCells","collisionLocationArray","randomCell","createAIShipLocation","owner","allowed","onClickHandler","mouseEnterHandler","mouseLeaveHandler","getCellsClass","notAllowed","attackHit","attackMiss","attackAllowed","wml","onMouseEnter","onMouseLeave","style","cursor","ShipsPlacement","useState","currentShipIndex","setCurrentShipIndex","setAxis","hovered","setHovered","humanShipsLocations","setHumanShipsLocations","shipsToPlace","setShipsToPlace","useEffect","axisContainer","axisBtn","marginTop","prev","updatedLocations","list","shipReceiveHit","shipOwner","shipObj","checkGameOver","Battle","humanAllowed","setHumanAllowed","updateHumanAllowed","console","log","setTimeout","aiAttack","justifyContent","GameOver","ComponentsRenderer","component","App","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.21903805.chunk.js","sourcesContent":["const Gameboard = function () {\r\n  const boardCells = [];\r\n  for (let i = 0; i < 100; i++) {\r\n    boardCells.push({ hasShip: false, isShot: false });\r\n  }\r\n  return {\r\n    board: boardCells,\r\n    createLocationArray(cell, shipLength, axis) {\r\n      const locationArray = [];\r\n      for (let i = 0; i < shipLength; i++) {\r\n        axis === \"x\"\r\n          ? locationArray.push(cell + i)\r\n          : locationArray.push(cell + i * 10);\r\n      }\r\n      return locationArray;\r\n    },\r\n\r\n    updateCellsHaveShip(locationArray) {\r\n      locationArray.forEach((cell) => {\r\n        this.board[cell].hasShip = true;\r\n      });\r\n    },\r\n\r\n    checkCollisions(locationArray) {\r\n      const collisions = [9, 19, 29, 39, 49, 59, 69, 79, 89, 99];\r\n      if (locationArray.some((cell) => !this.board[cell])) {\r\n        // x-axis collision\r\n        return false;\r\n      } else if (locationArray.some((cell) => this.board[cell].hasShip)) {\r\n        // check if cell already has a ship\r\n        return false;\r\n      } else if (\r\n        // y-axis collision\r\n        collisions.some((collisionCell) =>\r\n          [collisionCell, collisionCell + 1].every((combination) =>\r\n            locationArray.includes(combination)\r\n          )\r\n        )\r\n      ) {\r\n        return false;\r\n      } else {\r\n        return true;\r\n      }\r\n    },\r\n\r\n    receiveAttack(cell) {\r\n      this.board[cell].isShot = true;\r\n    },\r\n\r\n    isShipHit(cell) {\r\n      return this.board[cell].hasShip;\r\n    },\r\n\r\n    areAllShipsSunk() {\r\n      const shipsCells = this.board.filter((cell) => cell.hasShip);\r\n      return shipsCells.every((cell) => cell.isShot);\r\n    },\r\n\r\n    // this returns a version of the game board that represents what the opponent is allowed to see\r\n    opponentBoard() {\r\n      return this.board.map((cell) => {\r\n        return cell.isShot && cell.hasShip\r\n          ? \"hit\"\r\n          : cell.isShot\r\n          ? \"miss\"\r\n          : \"empty\";\r\n      });\r\n    },\r\n  };\r\n};\r\n\r\nexport default Gameboard;\r\n","import Gameboard from \"./Gameboard\";\r\n\r\nconst Player = function (type) {\r\n  return {\r\n    type,\r\n    ships: [],\r\n    gameboard: Gameboard(),\r\n    attack(location, gameboard) {\r\n      if (gameboard.opponentBoard()[location] === \"empty\") {\r\n        gameboard.receiveAttack(location);\r\n      }\r\n    },\r\n  };\r\n};\r\n\r\nexport default Player;\r\n","import Player from \"./Player\";\r\n\r\nconst ComputerAI = function () {\r\n  const ComputerAI = {\r\n    availableShots: [],\r\n    shotsHit: [],\r\n    sunkShipsCells: [],\r\n    getRandomItemFromArray(array) {\r\n      const index = Math.floor(Math.random() * array.length);\r\n      return array[index];\r\n    },\r\n\r\n    updateAvailableShots(gameboard) {\r\n      const opponentBoard = gameboard.opponentBoard();\r\n      const newAvailableShots = [];\r\n      const newShotsHit = [];\r\n      opponentBoard.forEach((loc, index) => {\r\n        if (loc === \"empty\") {\r\n          newAvailableShots.push(index);\r\n        } else if (loc === \"hit\") {\r\n          if (this.sunkShipsCells.includes(index)) return;\r\n          else newShotsHit.push(index);\r\n        }\r\n        this.availableShots = newAvailableShots;\r\n        this.shotsHit = newShotsHit;\r\n      });\r\n    },\r\n\r\n    // filter out sunk ships\r\n    filterShotsHit(ships) {\r\n      // eslint-disable-next-line\r\n      this.shotsHit = this.shotsHit.filter((cell) => {\r\n        const hitShip = ships.find((ship) => ship.position.includes(cell));\r\n        if (hitShip.isSunk()) {\r\n          this.sunkShipsCells.push(cell);\r\n        } else return true;\r\n      });\r\n    },\r\n\r\n    detectShips() {\r\n      // locate any two shots that resemble a ship\r\n      let detectedShip = this.shotsHit.filter((cell, index, thisArray) => {\r\n        return (\r\n          (thisArray.includes(cell + 1) && (cell + 1) % 10 !== 0) ||\r\n          (thisArray.includes(cell - 1) && cell % 10 !== 0) ||\r\n          thisArray.includes(cell + 10) ||\r\n          thisArray.includes(cell - 10)\r\n        );\r\n      });\r\n\r\n      // remove doubles\r\n      detectedShip = detectedShip.filter((cell, i, thisArray) => {\r\n        return thisArray.lastIndexOf(cell) === i;\r\n      });\r\n      if (detectedShip.length) {\r\n        // firstShipCell is the first hit cell of a ship that is not sunk found on table\r\n        // it's always the smallest in the array\r\n        const firstShipCell = detectedShip[0];\r\n        const axis = detectedShip[1] - firstShipCell === 1 ? \"x\" : \"y\";\r\n        const possibleShots = [];\r\n        if (axis === \"x\") {\r\n          // push cell left to the detected ship unless it's in the last column\r\n          if (firstShipCell % 10 !== 0) possibleShots.push(firstShipCell - 1);\r\n          const furthestRight = detectedShip.find(\r\n            (cell, index, thisArray) => !thisArray.includes(cell + 1)\r\n          );\r\n          // push cell right to the detected ship unless it's in the first column\r\n          if ((furthestRight + 1) % 10 !== 0)\r\n            possibleShots.push(furthestRight + 1);\r\n        } else {\r\n          // push lowermost cell unless if it's in the first row\r\n          if (firstShipCell - 10 >= 0) possibleShots.push(firstShipCell - 10);\r\n          const furthestUp = detectedShip.find(\r\n            (cell, index, thisArray) => !thisArray.includes(cell + 10)\r\n          );\r\n          // push uppermost cell unless if it's in the last row\r\n          if (furthestUp + 10 <= 100) possibleShots.push(furthestUp + 10);\r\n        }\r\n        // remove cells that are not available to shoot\r\n        const filteredPossibleShots = possibleShots.filter((cell) =>\r\n          this.availableShots.includes(cell)\r\n        );\r\n        return filteredPossibleShots;\r\n      }\r\n    },\r\n\r\n    // after a hit on a new ship, get a next hit on that ship\r\n    followUpSingleHits() {\r\n      const hitCell = this.shotsHit[0];\r\n      const possibleShots = [\r\n        hitCell + 1,\r\n        hitCell - 1,\r\n        hitCell + 10,\r\n        hitCell - 10,\r\n      ];\r\n      // eslint-disable-next-line\r\n      const filteredPossibleShots = possibleShots.filter((cell) => {\r\n        // only keep cells on that gameboard\r\n        if (this.availableShots.includes(cell)) {\r\n          // prevent possible shots across more than one row\r\n          if (hitCell % 10 === 0) return (cell + 1) % 10 !== 0;\r\n          else if ((hitCell + 1) % 10 === 0) return cell % 10 !== 0;\r\n          else return true;\r\n        }\r\n      });\r\n\r\n      return filteredPossibleShots;\r\n    },\r\n\r\n    // No single hits to follow up or detected ships, attack a random location\r\n    getRandomLocation() {\r\n      const shotLocation = this.getRandomItemFromArray(this.availableShots);\r\n      return shotLocation;\r\n    },\r\n\r\n    getAttackLocation() {},\r\n  };\r\n  // ComputerAI is a composition of ComputerAI and Player\r\n  const ComputerAIobj = Object.assign({}, Player(\"ai\"), ComputerAI);\r\n  return ComputerAIobj;\r\n};\r\n\r\nexport default ComputerAI;\r\n","import Player from \"./factories/Player\";\r\nimport ComputerAI from \"./factories/ComputerAI\";\r\nimport { initialState } from \"./GameContext\";\r\nfunction reducer(state, action) {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case \"CREATE_PLAYERS\":\r\n      return {\r\n        ...state,\r\n        players: { human: Player(\"human\"), ai: ComputerAI() },\r\n      };\r\n    case \"SET_STAGE\":\r\n      return { ...state, stage: payload };\r\n    case \"SET_MESSAGE\":\r\n      return { ...state, message: payload };\r\n    case \"SET_PLAYER_SHIPS\":\r\n      const { player, ships } = payload;\r\n      const newState = { ...state };\r\n      newState.players[player].ships = ships;\r\n      return { ...newState };\r\n    case \"SET_TURN\":\r\n      return { ...state, turn: payload };\r\n    case \"SET_WINNER\":\r\n      return { ...state, winner: payload };\r\n    case \"RESTART_GAME\":\r\n      return initialState;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default reducer;\r\n","import React, { createContext, useReducer } from \"react\";\r\nimport reducer from \"./reducer\";\r\n\r\nexport const GameContext = createContext();\r\n\r\nexport const initialState = {\r\n  players: {},\r\n  turn: \"\",\r\n  stage: \"init\",\r\n  message: \"\",\r\n  winner: \"\",\r\n};\r\n\r\nfunction GameContextProvider(props) {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  return (\r\n    <GameContext.Provider value={{ state, dispatch }}>\r\n      {props.children}\r\n    </GameContext.Provider>\r\n  );\r\n}\r\n\r\nexport default GameContextProvider;\r\n","import React, { useContext } from \"react\";\r\nimport { GameContext } from \"../GameContext\";\r\nimport styles from \"./styles/gameStart.module.css\";\r\n\r\nfunction GameStart() {\r\n  const { dispatch } = useContext(GameContext);\r\n  function startGame() {\r\n    dispatch({ type: \"CREATE_PLAYERS\" });\r\n    dispatch({ type: \"SET_STAGE\", payload: \"ships_placement\" });\r\n  }\r\n  return (\r\n    <div className={styles.flexContainer}>\r\n      <h1 className={styles.gameTitle}>Battleship</h1>\r\n      <button onClick={startGame} className=\"btn-main\">\r\n        Start\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameStart;\r\n","const Ship = function (name, position) {\r\n  return {\r\n    name,\r\n    length: position.length,\r\n    position,\r\n    hits: [],\r\n    hit(point) {\r\n      this.hits.push(point);\r\n    },\r\n    isSunk() {\r\n      return this.position.every((point) => this.hits.includes(point));\r\n    },\r\n  };\r\n};\r\n\r\nexport default Ship;\r\n","import Ship from \"../factories/Ship\";\r\n\r\n// the dispatch parameter here is the dispatch function from the reducer\r\nconst shipsTypes = [\r\n  { name: \"Carrier\", length: 5 },\r\n  { name: \"Battleship\", length: 4 },\r\n  { name: \"Destroyer\", length: 3 },\r\n  { name: \"Submarine\", length: 3 },\r\n  { name: \"Patrol boat\", length: 2 },\r\n];\r\n\r\nconst createShips = (array) => {\r\n  // create ships objects from an array of locations arrays\r\n  const shipsObjects = [];\r\n  shipsTypes.forEach((ship, index) => {\r\n    const location = array[index];\r\n    const newShip = Ship(ship.name, location);\r\n    shipsObjects.push(newShip);\r\n  });\r\n  return shipsObjects;\r\n};\r\n\r\nconst setPlayerShips = (playerType, ships, dispatch) => {\r\n  dispatch({\r\n    type: \"SET_PLAYER_SHIPS\",\r\n    payload: { player: playerType, ships },\r\n  });\r\n};\r\n\r\nconst createAIShipLocation = (gameboard, shipLength) => {\r\n  // create ship location for AI player\r\n  const axes = [\"x\", \"y\"];\r\n  const randomAxis = axes[Math.floor(Math.random() * axes.length)];\r\n  const availableCells = [];\r\n  gameboard.board.forEach((cell, index) => {\r\n    const collisionLocationArray = gameboard.createLocationArray(\r\n      index,\r\n      shipLength,\r\n      randomAxis\r\n    );\r\n    if (gameboard.checkCollisions(collisionLocationArray))\r\n      availableCells.push(index);\r\n  });\r\n  const randomCell =\r\n    availableCells[Math.floor(Math.random() * availableCells.length)];\r\n  const locationArray = gameboard.createLocationArray(\r\n    randomCell,\r\n    shipLength,\r\n    randomAxis\r\n  );\r\n  return locationArray;\r\n};\r\n\r\nconst placeAIShips = (aiGameboard, dispatch) => {\r\n  const locationArrays = [];\r\n  shipsTypes.forEach((ship) => {\r\n    const location = createAIShipLocation(aiGameboard, ship.length);\r\n    aiGameboard.updateCellsHaveShip(location);\r\n    locationArrays.push(location);\r\n  });\r\n  const ships = createShips(locationArrays);\r\n  setPlayerShips(\"ai\", ships, dispatch);\r\n};\r\n\r\nexport { shipsTypes, createShips, setPlayerShips, placeAIShips };\r\n","import React from \"react\";\r\nimport styles from \"./styles/gameboard.module.css\";\r\n\r\nfunction Gameboard(props) {\r\n  const owner = props.owner;\r\n  const stage = props.stage;\r\n  const board = props.board;\r\n  const allowed = props.allowed;\r\n  const onClickHandler = props.onClickHandler;\r\n  const mouseEnterHandler = props.mouseEnterHandler;\r\n  const mouseLeaveHandler = props.mouseLeaveHandler;\r\n\r\n  const getCellsClass = (cell, index, type) => {\r\n    // return style class depending on the game stage\r\n    if (stage === \"ships_placement\") {\r\n      // cell class\r\n      if (type === \"main\") {\r\n        return cell.hasShip ? styles.hasShip : styles.cell;\r\n      } else {\r\n        // cell hover class\r\n        return allowed.includes(index) ? styles.allowed : styles.notAllowed;\r\n      }\r\n    } else {\r\n      if (type === \"main\") {\r\n        return cell.isShot && cell.hasShip\r\n          ? styles.attackHit\r\n          : cell.isShot\r\n          ? styles.attackMiss\r\n          : cell.hasShip && owner === \"human\"\r\n          ? styles.hasShip\r\n          : styles.cell;\r\n      } else {\r\n        if (owner === \"ai\") {\r\n          return allowed.includes(index)\r\n            ? styles.attackAllowed\r\n            : styles.notAllowed;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const createCells = () => {\r\n    return board.map((cell, index) => {\r\n      if (owner === \"ai\" || stage === \"ships_placement\") {\r\n        // mouse handlers only needed when placing human ships and on AI's board\r\n        return (\r\n          <div\r\n            className={`${getCellsClass(cell, index, \"main\")} ${getCellsClass(\r\n              cell,\r\n              index,\r\n              \"hover\"\r\n            )}`}\r\n            key={`cell-${index}`}\r\n            onClick={onClickHandler}\r\n            onMouseEnter={() => {\r\n              mouseEnterHandler(index);\r\n            }}\r\n            onMouseLeave={mouseLeaveHandler}\r\n          ></div>\r\n        );\r\n      } else {\r\n        return (\r\n          <div\r\n            className={`${getCellsClass(cell, index, \"main\")} ${getCellsClass(\r\n              cell,\r\n              index,\r\n              \"hover\"\r\n            )}`}\r\n            key={`cell-${index}`}\r\n            style={{ cursor: \"default\" }}\r\n          ></div>\r\n        );\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className={`${styles.gameboard} ${\r\n          stage === \"ships_placement\" ? styles.wml : \"\"\r\n        }`}\r\n      >\r\n        {createCells()}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Gameboard;\r\n","import React, { useContext, useState, useEffect } from \"react\";\r\nimport { GameContext } from \"../GameContext\";\r\nimport {\r\n  shipsTypes,\r\n  createShips,\r\n  setPlayerShips,\r\n  placeAIShips,\r\n} from \"../game_logic/shipsPlacement\";\r\nimport Gameboard from \"./Gameboard\";\r\nimport styles from \"./styles/shipsPlacement.module.css\";\r\n\r\nfunction ShipsPlacement() {\r\n  const [currentShipIndex, setCurrentShipIndex] = useState(0);\r\n  const [axis, setAxis] = useState(\"x\");\r\n  const [hovered, setHovered] = useState([]);\r\n  const [humanShipsLocations, setHumanShipsLocations] = useState([]);\r\n  const [shipsToPlace, setShipsToPlace] = useState(shipsTypes);\r\n  const { state, dispatch } = useContext(GameContext);\r\n  const { players } = state;\r\n  const { human } = players;\r\n  const { gameboard } = human;\r\n\r\n  useEffect(() => {\r\n    placeAIShips(players.ai.gameboard, dispatch);\r\n    dispatch({\r\n      type: \"SET_MESSAGE\",\r\n      payload: \"Place your ships on the gameboard\",\r\n    });\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  const mouseEnterHandler = (index) => {\r\n    // the index will come from mapping the gameboard in the return statement\r\n    const { length } = shipsTypes[currentShipIndex];\r\n    const locationArray = gameboard.createLocationArray(index, length, axis);\r\n    const collision = gameboard.checkCollisions(locationArray);\r\n    // change colour of cells based on collision\r\n    if (collision) {\r\n      setHovered(locationArray);\r\n      if (currentShipIndex === 4)\r\n        // an ugly way to work around the one step delayed update of humanShipsLocations state\r\n        // this and the ones in the other handlers\r\n        setHumanShipsLocations([...humanShipsLocations, locationArray]);\r\n    } else setHovered([]);\r\n  };\r\n\r\n  const mouseLeaveHandler = () => {\r\n    if (currentShipIndex === 4) {\r\n      const updatedLocations = humanShipsLocations.filter(\r\n        (array) => array.length > 2\r\n      );\r\n      setHumanShipsLocations(updatedLocations);\r\n    }\r\n    setHovered([]);\r\n  };\r\n\r\n  const onClickHandler = () => {\r\n    // hovered state is the location array\r\n    if (hovered.length) {\r\n      gameboard.updateCellsHaveShip(hovered);\r\n      if (currentShipIndex < 4)\r\n        setHumanShipsLocations([...humanShipsLocations, hovered]);\r\n      if (currentShipIndex >= 4) {\r\n        setHovered([]);\r\n        const ships = createShips(humanShipsLocations);\r\n        setPlayerShips(\"human\", ships, dispatch);\r\n        dispatch({\r\n          type: \"SET_STAGE\",\r\n          payload: \"battle\",\r\n        });\r\n      } else {\r\n        setShipsToPlace((prev) => {\r\n          return prev.filter(\r\n            (ship) => !(ship.name === shipsTypes[currentShipIndex].name)\r\n          );\r\n        });\r\n        setCurrentShipIndex(currentShipIndex + 1);\r\n        setHovered([]);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className={styles.axisContainer}>\r\n        <span>Axis</span>\r\n        <button\r\n          onClick={() => {\r\n            if (axis === \"x\") setAxis(\"y\");\r\n            else setAxis(\"x\");\r\n          }}\r\n          className={styles.axisBtn}\r\n        >\r\n          {axis}\r\n        </button>\r\n      </div>\r\n      <div className=\"board-container\" style={{ marginTop: \"1%\" }}>\r\n        <Gameboard\r\n          stage={state.stage}\r\n          owner=\"human\"\r\n          board={gameboard.board}\r\n          allowed={hovered}\r\n          onClickHandler={onClickHandler}\r\n          mouseEnterHandler={mouseEnterHandler}\r\n          mouseLeaveHandler={mouseLeaveHandler}\r\n        />\r\n        <ul className={styles.list}>\r\n          {shipsToPlace.map((ship, index) => {\r\n            return <li key={`toPlace${index}`}>{ship.name}</li>;\r\n          })}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ShipsPlacement;\r\n","// the dispatch parameter here is the dispatch function from the reducer\r\n\r\nconst shipReceiveHit = (cell, shipOwner, dispatch) => {\r\n  const ship = shipOwner.ships.find((shipObj) => {\r\n    return shipObj.position.includes(cell);\r\n  });\r\n  ship.hit(cell);\r\n  if (shipOwner.type === \"human\") {\r\n    dispatch({\r\n      type: \"SET_MESSAGE\",\r\n      payload: `Your opponent hit your ${ship.name}`,\r\n    });\r\n  } else {\r\n    dispatch({\r\n      type: \"SET_MESSAGE\",\r\n      payload: \"You hit an opponent's ship\",\r\n    });\r\n  }\r\n  if (ship.isSunk()) {\r\n    if (shipOwner.type === \"human\") {\r\n      dispatch({\r\n        type: \"SET_MESSAGE\",\r\n        payload: `Your ${ship.name} has sunk`,\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: \"SET_MESSAGE\",\r\n        payload: `You have sunked your opponents's ${ship.name}`,\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\nconst checkGameOver = (player, gameboard, dispatch) => {\r\n  const areAllShipsSunk = gameboard.areAllShipsSunk();\r\n  if (areAllShipsSunk) {\r\n    dispatch({ type: \"SET_WINNER\", payload: player });\r\n    dispatch({ type: \"SET_TURN\", payload: \"\" });\r\n    dispatch({ type: \"SET_STAGE\", payload: \"game_over\" });\r\n  }\r\n};\r\n\r\nconst aiAttack = (ai, human, dispatch) => {\r\n  ai.updateAvailableShots(human.gameboard);\r\n  ai.filterShotsHit(human.ships);\r\n  let cell;\r\n  if (ai.shotsHit.length === 0) {\r\n    cell = ai.getRandomLocation();\r\n  } else if (ai.shotsHit.length === 1) {\r\n    const possibleShots = ai.followUpSingleHits();\r\n    cell = ai.getRandomItemFromArray(possibleShots);\r\n  } else {\r\n    const possibleShots = ai.detectShips();\r\n    cell = ai.getRandomItemFromArray(possibleShots);\r\n  }\r\n  ai.attack(cell, human.gameboard);\r\n  const isHit = human.gameboard.isShipHit(cell);\r\n  if (isHit) {\r\n    shipReceiveHit(cell, human, dispatch);\r\n    checkGameOver(\"ai\", human.gameboard, dispatch);\r\n  } else {\r\n    dispatch({ type: \"SET_MESSAGE\", payload: \"The opponent's shot misses\" });\r\n  }\r\n  setTimeout(() => {\r\n    dispatch({ type: \"SET_TURN\", payload: \"human\" });\r\n    dispatch({\r\n      type: \"SET_MESSAGE\",\r\n      payload: \"It's your turn. Attack your opponent's ships\",\r\n    });\r\n  }, 1200);\r\n};\r\n\r\nexport { shipReceiveHit, checkGameOver, aiAttack };\r\n","import React, { useContext, useState, useEffect } from \"react\";\r\nimport { GameContext } from \"../GameContext\";\r\nimport Gameboard from \"./Gameboard\";\r\nimport { shipReceiveHit, checkGameOver, aiAttack } from \"../game_logic/battle\";\r\n\r\nfunction Battle() {\r\n  // locations allowed for human player to attack\r\n  const [humanAllowed, setHumanAllowed] = useState([]);\r\n  const [hovered, setHovered] = useState();\r\n  const { state, dispatch } = useContext(GameContext);\r\n  const { human, ai } = state.players;\r\n\r\n  const updateHumanAllowed = () => {\r\n    setHumanAllowed(() => {\r\n      const board = ai.gameboard.opponentBoard();\r\n      // eslint-disable-next-line\r\n      return board.map((cell, index) => {\r\n        if (cell === \"empty\") return index;\r\n      });\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    // initialise battle\r\n    updateHumanAllowed();\r\n    dispatch({ type: \"SET_TURN\", payload: \"human\" });\r\n    dispatch({\r\n      type: \"SET_MESSAGE\",\r\n      payload: \"It's your turn. Attack your opponent's ships\",\r\n    });\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log(ai.ships);\r\n    if (state.turn === \"ai\") {\r\n      setTimeout(() => aiAttack(ai, human, dispatch), 750);\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [state.turn]);\r\n\r\n  const onClickHandler = () => {\r\n    // human attack\r\n    const cell = hovered;\r\n    if (humanAllowed.includes(cell) && state.turn === \"human\") {\r\n      human.attack(cell, ai.gameboard);\r\n      const isHit = ai.gameboard.isShipHit(cell);\r\n      if (isHit) {\r\n        shipReceiveHit(cell, ai, dispatch);\r\n        checkGameOver(\"human\", ai.gameboard, dispatch);\r\n      } else {\r\n        dispatch({ type: \"SET_MESSAGE\", payload: \"Your shot misses\" });\r\n      }\r\n      updateHumanAllowed();\r\n      // set timout to create delay to make messages readable between state changes\r\n      setTimeout(() => {\r\n        dispatch({ type: \"SET_TURN\", payload: \"ai\" });\r\n        dispatch({ type: \"SET_MESSAGE\", payload: \"It's your opponents turn\" });\r\n      }, 1200);\r\n    }\r\n  };\r\n\r\n  const mouseEnterHandler = (index) => {\r\n    setHovered(index);\r\n  };\r\n  const mouseLeaveHandler = () => {\r\n    setHovered();\r\n  };\r\n  return (\r\n    <div className=\"board-container\" style={{ justifyContent: \"space-evenly\" }}>\r\n      <Gameboard owner=\"human\" board={human.gameboard.board} />\r\n      <Gameboard\r\n        owner=\"ai\"\r\n        board={ai.gameboard.board}\r\n        allowed={humanAllowed}\r\n        onClickHandler={onClickHandler}\r\n        mouseEnterHandler={mouseEnterHandler}\r\n        mouseLeaveHandler={mouseLeaveHandler}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Battle;\r\n","import React, { useContext, useEffect } from \"react\";\r\nimport { GameContext } from \"../GameContext\";\r\nfunction GameOver() {\r\n  const { state, dispatch } = useContext(GameContext);\r\n  const onClickHandler = () => {\r\n    dispatch({ type: \"RESTART_GAME\" });\r\n  };\r\n  useEffect(() => {\r\n    if (state.winner === \"human\") {\r\n      dispatch({ type: \"SET_MESSAGE\", payload: \"You win\" });\r\n    } else {\r\n      dispatch({ type: \"SET_MESSAGE\", payload: \"Computer AI wins\" });\r\n    }\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"board-container\">\r\n      <button onClick={onClickHandler} className=\"btn-main\">\r\n        Play again\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameOver;\r\n","import React, { useContext } from \"react\";\r\nimport { GameContext } from \"../GameContext\";\r\nimport GameStart from \"./GameStart\";\r\nimport ShipsPlacement from \"./ShipsPlacement\";\r\nimport Battle from \"./Battle\";\r\nimport GameOver from \"./Gameover\";\r\nfunction ComponentsRenderer() {\r\n  // renders components depending on the stage of the game\r\n  const { state } = useContext(GameContext);\r\n  let component;\r\n  switch (state.stage) {\r\n    case \"init\":\r\n      component = <GameStart />;\r\n      break;\r\n    case \"ships_placement\":\r\n      component = <ShipsPlacement />;\r\n      break;\r\n    case \"battle\":\r\n      component = <Battle />;\r\n      break;\r\n    case \"game_over\":\r\n      component = <GameOver />;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {state.stage !== \"init\" ? <p className=\"msg\">{state.message}</p> : \"\"}\r\n      {component}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ComponentsRenderer;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport ComponentsRenderer from \"./components/ComponentsRenderer\";\nimport GameContextProvider from \"./GameContext\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GameContextProvider>\n        <ComponentsRenderer />\n      </GameContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gameboard\":\"gameboard_gameboard__344mG\",\"wml\":\"gameboard_wml__1BvXp\",\"cell\":\"gameboard_cell__2DYyY\",\"allowed\":\"gameboard_allowed__gazvv\",\"notAllowed\":\"gameboard_notAllowed__1vRbK\",\"hasShip\":\"gameboard_hasShip__rQQMj\",\"attackAllowed\":\"gameboard_attackAllowed__2sUE1\",\"attackMiss\":\"gameboard_attackMiss__3f7ju\",\"attackHit\":\"gameboard_attackHit__3ixC5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"axisContainer\":\"shipsPlacement_axisContainer__3NNzC\",\"axisBtn\":\"shipsPlacement_axisBtn__1uOeo\",\"list\":\"shipsPlacement_list__avdG8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"flexContainer\":\"gameStart_flexContainer__1F_st\",\"gameTitle\":\"gameStart_gameTitle__1sCgw\"};"],"sourceRoot":""}